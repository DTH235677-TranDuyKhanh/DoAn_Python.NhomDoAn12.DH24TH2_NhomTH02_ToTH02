import tkinter as tk
from tkinter import ttk, messagebox
import mysql.connector
from tkcalendar import DateEntry

# ===== H√ÄM K·∫æT N·ªêI DATABASE =====
def connect_db():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="Khanh@091025",  
        database="ql_diemsinhvien"
        #h√†m n√†y ƒë·ªÉ m·ªü k·∫øt n·ªëi ƒë·∫øn database ql_diemsinhvien.
    )
 
# ===== H√ÄM CHUY·ªÇN FRAME =====
def show_frame(name):
    for f in frames.values():
        f.pack_forget()  #n frame kh·ªèi c·ª≠a s·ªï ‚Äî nh∆∞ng kh√¥ng x√≥a n·ªôi dung.
    frames[name].pack(fill="both", expand=True) #l√†m frame gi√£n ƒë·∫ßy v√πng ch·ª©a.
    #H√†m n√†y ·∫©n t·∫•t c·∫£ c√°c frame, sau ƒë√≥ hi·ªÉn th·ªã frame c√≥ t√™n name.

# ===== H√ÄM T·∫¢I D·ªÆ LI·ªÜU =====
def load_data(table_name, tree):
    for item in tree.get_children(): #x√≥a to√†n b·ªô h√†ng hi·ªán c√≥ trong Treeview ƒë·ªÉ tr√°nh ch·ªìng d·ªØ li·ªáu khi t·∫£i l·∫°i.
        tree.delete(item)
    conn = connect_db() #m·ªü k·∫øt n·ªëi database
    cursor = conn.cursor() #t·∫°o cursor ƒë·ªÉ ch·∫°y truy v·∫•n.

    query_map = { #l√† dict √°nh x·∫° t√™n logical (vd "sinhvien") sang c√¢u SQL t∆∞∆°ng ·ª©ng. Gi√∫p h√†m chung x·ª≠ l√Ω nhi·ªÅu b·∫£ng.
        "khoa": "SELECT maKhoa AS 'M√£ Khoa', tenKhoa AS 'T√™n Khoa' FROM khoa",
        "lop": "SELECT maLop AS 'M√£ L·ªõp', tenLop AS 'T√™n L·ªõp', maKhoa AS 'M√£ Khoa' FROM lop",
        "giangvien": "SELECT  maGV AS 'M√£ Gi·∫£ng Vi√™n', hoTen AS 'H·ªç T√™n Gi·∫£ng Vi√™n', maKhoa AS 'M√£ Khoa' FROM giangvien",
        "sinhvien": "SELECT maSV AS 'M√£ S·ªë Sinh Vi√™n', hoTen AS 'H·ªç T√™n', ngaySinh AS 'Ng√†y Sinh', gioiTinh AS 'Gi·ªõi T√≠nh', diaChi AS 'ƒê·ªãa Ch·ªâ', maLop AS 'M√£ L·ªõp' FROM sinhvien",
        "monhoc": "SELECT maMH AS 'M√£ M√¥n H·ªçc', tenMH AS 'T√™n M√¥n H·ªçc', soTinChi AS 'S·ªë T√≠n Ch·ªâ', maGV AS 'Gi·∫£ng Vi√™n Ph·ª• Tr√°ch' FROM monhoc",
        "diem": "SELECT maSV AS 'M√£ S·ªë Sinh Vi√™n', maMH AS 'M√£ M√¥n H·ªçc', diemQT AS 'ƒêi·ªÉm Qu√° Tr√¨nh', diemThi AS 'ƒêi·ªÉm Thi', diemTong AS 'ƒêi·ªÉm T·ªïng' FROM diem"
    }

    cursor.execute(query_map[table_name])
    rows = cursor.fetchall()
    #Th·ª±c hi·ªán truy v·∫•n v√† l·∫•y to√†n b·ªô d·ªØ li·ªáu v·ªÅ.

    columns = [desc[0] for desc in cursor.description] #·∫•y t√™n c·ªôt (ƒë·ªÉ g√°n header cho Treeview).
    tree["columns"] = columns #ƒë·∫∑t c·∫•u h√¨nh c·ªôt cho Treeview.
    for col in columns:
        tree.heading(col, text=col) #ƒë·∫∑t ti√™u ƒë·ªÅ hi·ªÉn th·ªã.
        tree.column(col, width=150, anchor="center") #ƒë·∫∑t chi·ªÅu r·ªông v√† cƒÉn gi·ªØa n·ªôi dung c·ªôt.

    for row in rows:
        tree.insert("", "end", values=row) #th√™m t·ª´ng h√†ng v√†o Treeview.
    conn.close() #ƒë√≥ng k·∫øt n·ªëi (r·∫•t quan tr·ªçng ƒë·ªÉ gi·∫£i ph√≥ng t√†i nguy√™n). 

# ===== H√ÄM T√çNH ƒêI·ªÇM TB & X·∫æP LO·∫†I =====
def calc_average(tree):
    for item in tree.get_children():
        tree.delete(item)
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT sv.maSV, sv.hoTen, AVG(d.diemTong) AS diemTB,
        CASE
            WHEN AVG(d.diemTong) >= 8 THEN 'Gi·ªèi'
            WHEN AVG(d.diemTong) >= 6.5 THEN 'Kh√°'
            WHEN AVG(d.diemTong) >= 5 THEN 'Trung b√¨nh'
            ELSE 'Y·∫øu'
        END AS xepLoai
        FROM diem d
        JOIN sinhvien sv ON d.maSV = sv.maSV
        GROUP BY sv.maSV, sv.hoTen
    """)
    rows = cursor.fetchall()
    columns = ["M√£ SV", "H·ªç T√™n", "ƒêi·ªÉm TB", "X·∫øp lo·∫°i"]
    tree["columns"] = columns
    for col in columns:
        tree.heading(col, text=col)
        tree.column(col, width=150, anchor="center")
    for row in rows:
        diem_tb = round(row[2], 2) if row[2] is not None else 0  # l√†m tr√≤n 2 ch·ªØ s·ªë th·∫≠p ph√¢n (ƒë√£ ch·ªânh theo y√™u c·∫ßu tr∆∞·ªõc). v√† tr√°nh l·ªói v·ªõi sinh vi√™n kh√¥ng c√≥ ƒëi·ªÉm.
        tree.insert("", "end", values=(row[0], row[1], diem_tb, row[3]))
    conn.close()

# ====== T·∫†O C·ª¨A S·ªî CH√çNH ======
root = tk.Tk()
root.title("Qu·∫£n l√Ω ƒëi·ªÉm sinh vi√™n")
root.geometry("700x500")
root.config(bg="#f7f7f7")
root.resizable(False, False)

# ===== CƒÇN GI·ªÆA M√ÄN H√åNH =====
window_width = 700
window_height = 500
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()

x = (screen_width // 2) - (window_width // 2)
y = (screen_height // 2) - (window_height // 2)

root.geometry(f"{window_width}x{window_height}+{x}+{y}")  # üëà ƒë·∫∑t v·ªã tr√≠ gi·ªØa m√†n h√¨nh
root.config(bg="#f7f7f7")
root.resizable(False, False)

# ===== MENU =====
menu = tk.Menu(root) #T·∫°o menu ƒë·ªÉ th√™m submenu cho chuy·ªÉn trang.
root.config(menu=menu)

frames = {} #frames dict l∆∞u Frame cho m·ªói b·∫£ng.
tables = ["diem", "sinhvien", "lop", "khoa", "giangvien", "monhoc"] #tables danh s√°ch t√™n d√πng ƒë·ªÉ t·∫°o frames theo v√≤ng l·∫∑p.
titles = {
    "diem": "QU·∫¢N L√ù ƒêI·ªÇM SINH VI√äN",
    "sinhvien": "DANH S√ÅCH SINH VI√äN",
    "lop": "DANH S√ÅCH L·ªöP",
    "khoa": "DANH S√ÅCH KHOA",
    "giangvien": "DANH S√ÅCH GI·∫¢NG VI√äN",
    "monhoc": "DANH S√ÅCH M√îN H·ªåC"
}

# ===== FONT CHUNG =====
title_font = ("Arial", 18, "bold")
# ===== T·∫†O FRAME =====
for t in tables: #V√≤ng l·∫∑p t·∫°o frame cho t·ª´ng b·∫£ng
    frames[t] = tk.Frame(root, bg="#fff")
    # ===== TI√äU ƒê·ªÄ =====
    title_label = tk.Label(
        frames[t],
        text=titles[t],
        font=title_font,
        fg="#333",
        bg="#fff"
    )
    title_label.pack(pady=(20, 5))
    
    # ==== TRANG QU·∫¢N L√ù ƒêI·ªÇM ====
    if t == "diem":
        # --- FORM NH·∫¨P LI·ªÜU ---
        form = tk.Frame(frames[t], bg="#fff")
        form.pack(pady=20, padx=100, fill="x") #fill="x" cho form gi√∫p gi√£n ngang.
        # Text m√£ s·ªë sinh vi√™n
        tk.Label(form, text="M√£ s·ªë sinh vi√™n:", bg="#fff").grid(row=0, column=0, padx=10, pady=5,sticky="w") #S·ª≠ d·ª•ng grid ƒë·ªÉ ƒëi·ªÅu ch·ªânh v·ªã tr√≠ label + entry theo h√†ng/c·ªôt.
        maSV_entry = tk.Entry(form, width=20)
        maSV_entry.grid(row=0, column=1, padx=5, pady=5,sticky="w")
        # Text n√£ m√¥n h·ªçc
        tk.Label(form, text="M√£ m√¥n h·ªçc:", bg="#fff").grid(row=0, column=2, padx=10, pady=5,sticky="w")
        maMH_entry = tk.Entry(form, width=20)
        maMH_entry.grid(row=0, column=3, padx=5, pady=5,sticky="w")
        # Text ƒëi·ªÉm qu√° tr√¨nh
        tk.Label(form, text="ƒêi·ªÉm qu√° tr√¨nh:", bg="#fff").grid(row=1, column=0, padx=10, pady=5,sticky="w")
        diemQT_entry = tk.Entry(form, width=20)
        diemQT_entry.grid(row=1, column=1, padx=5, pady=5)
        # Text ƒëi·ªÉm thi
        tk.Label(form, text="ƒêi·ªÉm thi:", bg="#fff").grid(row=1, column=2, padx=10, pady=5,sticky="w")
        diemThi_entry = tk.Entry(form, width=20)
        diemThi_entry.grid(row=1, column=3, padx=5, pady=5)

        # ====== H√ÄM RESET ======
        def reset_fields():
            maSV_entry.delete(0, tk.END)
            maMH_entry.delete(0, tk.END)
            diemQT_entry.delete(0, tk.END)
            diemThi_entry.delete(0, tk.END)
        # --- N√öT CH·ª®C NƒÇNG ---
        btn_frame = tk.Frame(frames[t], bg="#fff")
        btn_frame.pack(pady=2)

        ttk.Button(btn_frame, text="Th√™m ƒëi·ªÉm", width=15, command=lambda: add_diem()).grid(row=0, column=0, padx=8, pady=8)
        ttk.Button(btn_frame, text="S·ª≠a ƒëi·ªÉm", width=15, command=lambda: update_diem()).grid(row=0, column=1, padx=8, pady=8)
        ttk.Button(btn_frame, text="X√≥a ƒëi·ªÉm", width=15, command=lambda: delete_diem()).grid(row=0, column=2, padx=8, pady=8)
        ttk.Button(btn_frame, text="T√≠nh ƒëi·ªÉm TB & X·∫øp lo·∫°i", width=25, command=lambda tr=None: calc_average(tree_diem)).grid(row=0, column=3, padx=8, pady=8)
        ttk.Button(btn_frame, text="T·∫£i danh s√°ch", width=15, command=lambda n=t: load_data("diem", tree_diem)).grid(row=0, column=4, padx=8, pady=8)
        
        btn_frame2 = tk.Frame(frames[t], bg="#fff")
        btn_frame2.pack(pady=2)
    
        ttk.Button(btn_frame2, text="Reset", width=18, command=reset_fields).pack(side="left", padx=10, pady=5)
        ttk.Button(btn_frame2, text="Tho√°t", width=18, style="Accent.TButton", command=root.destroy).pack(side="left", padx=10 ,pady=5)#S·ª≠ d·ª•ng grid cho h√†ng 1, d√πng pack(side="left") cho h√†ng 2 ƒë·ªÉ cƒÉn gi·ªØa.
        # --- B·∫¢NG D·ªÆ LI·ªÜU ---
        tree_diem = ttk.Treeview(frames[t], show="headings") #show="headings" t·∫Øt c·ªôt m·∫∑c ƒë·ªãnh (tree icon) ‚Äî ch·ªâ hi·ªÉn th·ªã c·ªôt b·∫°n ƒë·∫∑t b·∫±ng tree["columns"].
        tree_diem.pack(fill="both", expand=True, padx=10, pady=10) #pack(fill="both", expand=True) cho b·∫£ng gi√£n chi·∫øm to√†n b·ªô v√πng c√≤n l·∫°i.

        def select_item(event):
            selected = tree_diem.focus()
            if not selected:
                return
            values = tree_diem.item(selected, "values")
            if len(values) >= 4:
                maSV_entry.delete(0, tk.END)
                maSV_entry.insert(0, values[0])
                maMH_entry.delete(0, tk.END)
                maMH_entry.insert(0, values[1])
                diemQT_entry.delete(0, tk.END)
                diemQT_entry.insert(0, values[2])
                diemThi_entry.delete(0, tk.END)
                diemThi_entry.insert(0, values[3])
        tree_diem.bind("<ButtonRelease-1>", select_item)
        #Khi nh·∫£ chu·ªôt tr√™n m·ªôt h√†ng, l·∫•y id c·ªßa d√≤ng ƒëang focus, r·ªìi l·∫•y values.
        #ƒêi·ªÅn gi√° tr·ªã v√†o c√°c Entry ƒë·ªÉ s·ª≠a ho·∫∑c x√≥a thu·∫≠n ti·ªán.
        
        # ==== H√ÄM TH√äM ====
        def add_diem():
            try:
                maSV = maSV_entry.get()
                maMH = maMH_entry.get()
                diemQT = float(diemQT_entry.get()) #L·∫•y d·ªØ li·ªáu t·ª´ Entry, √©p ki·ªÉu float cho ƒëi·ªÉm.
                diemThi = float(diemThi_entry.get())
                diemTong = diemQT * 0.4 + diemThi * 0.6

                conn = connect_db()
                cur = conn.cursor()
                cur.execute("INSERT INTO diem (maSV, maMH, diemQT, diemThi) VALUES (%s, %s, %s, %s)", (maSV, maMH, diemQT, diemThi))
                conn.commit()
                conn.close()
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ th√™m ƒëi·ªÉm!")
                load_data("diem", tree_diem) #G·ªçi load_data("diem", tree_diem) ƒë·ªÉ refresh b·∫£ng hi·ªÉn th·ªã sau khi thao t√°c.
            except Exception as e:
                messagebox.showerror("L·ªói", str(e))
                
        # ==== H√ÄM S·ª¨A ====
        def update_diem(): #d√πng UPDATE ... WHERE maSV=%s AND maMH=%s ƒë·ªÉ c·∫≠p nh·∫≠t ƒëi·ªÉm.
            try:
                maSV = maSV_entry.get()
                maMH = maMH_entry.get()
                diemQT = float(diemQT_entry.get())
                diemThi = float(diemThi_entry.get())
                diemTong = diemQT * 0.4 + diemThi * 0.6
                conn = connect_db()
                cur = conn.cursor()
                cur.execute("UPDATE diem SET diemQT=%s, diemThi=%s WHERE maSV=%s AND maMH=%s",(diemQT, diemThi, maSV, maMH))
                conn.commit()
                conn.close()
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t ƒëi·ªÉm!")
                load_data("diem", tree_diem) #g·ªçi load_data sau khi commit ƒë·ªÉ c·∫≠p nh·∫≠t UI.
            except Exception as e:
                messagebox.showerror("L·ªói", str(e))
        
        # ==== H√ÄM X√ìA ====
        def delete_diem(): #d√πng DELETE FROM diem WHERE maSV=%s AND maMH=%s ƒë·ªÉ x√≥a.
            try:
                maSV = maSV_entry.get()
                maMH = maMH_entry.get()
                conn = connect_db()
                cur = conn.cursor()
                cur.execute("DELETE FROM diem WHERE maSV=%s AND maMH=%s", (maSV, maMH))
                conn.commit()
                conn.close()
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a ƒëi·ªÉm!")
                load_data("diem", tree_diem) #g·ªçi load_data sau khi commit ƒë·ªÉ c·∫≠p nh·∫≠t UI.
            except Exception as e:
                messagebox.showerror("L·ªói", str(e))
    else:
        
        # === C√°c trang kh√°c ===
        tree = ttk.Treeview(frames[t], show="headings")
        tree.pack(fill="both", expand=True, padx=10, pady=10)
        ttk.Button(frames[t], text="T·∫£i danh s√°ch", command=lambda n=t, tr=tree: load_data(n, tr)).pack(pady=5)

# ===== MENU CHUY·ªÇN TRANG =====
submenu = tk.Menu(menu, tearoff=0) #T·∫°o m·ªôt submenu trong thanh menu ch√≠nh.
menu.add_cascade(label=" Trang ch√≠nh", menu=submenu)
for t in tables:
    submenu.add_command(label=titles[t], command=lambda n=t: show_frame(n)) #add_command(..., command=lambda n=t: show_frame(n)) ‚Äî d√πng lambda n=t ƒë·ªÉ gi·ªØ gi√° tr·ªã t ch√≠nh x√°c trong v√≤ng l·∫∑p (important).

root.update() #c·∫≠p nh·∫≠t giao di·ªán tr∆∞·ªõc khi l·∫•y k√≠ch th∆∞·ªõc.
root.minsize(root.winfo_width(), root.winfo_height()) #ƒë·∫∑t k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu ·ª©ng d·ª•ng b·∫±ng k√≠ch th∆∞·ªõc hi·ªán t·∫°i, tr√°nh b·ªã thu nh·ªè qu√°.

show_frame("diem") #hi·ªÉn th·ªã trang m·∫∑c ƒë·ªãnh.
root.mainloop() #b·∫Øt ƒë·∫ßu v√≤ng l·∫∑p s·ª± ki·ªán Tkinter ‚Äî GUI ph·∫£n h·ªìi ng∆∞·ªùi d√πng cho ƒë·∫øn khi ƒë√≥ng.
